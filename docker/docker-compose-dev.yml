version: '3'

services:
  web_monolith:
    restart: always
    build: ./../q_yaar_platform
    ports:
      - "8000:8000"
    depends_on:
      - redisearch
      - db
    networks:
      - backend
    env_file: ./../q_yaar_platform/.env
    command: gunicorn q_yaar.wsgi:application -w 4 -b :8000

  fast_worker:
    build: ./../q_yaar_platform
    command: celery -A esamudaay_platform worker -E -l info --concurrency=8 --pool -n fast_worker@qyaar.com  -Q example
    env_file: ./../q_yaar_platform/.env
    depends_on:
      - redisearch
    networks:
      - backend

  slow_worker:
    build: ./../q_yaar_platform
    command: celery -A esamudaay_platform worker -E -l info --concurrency=8 --pool -n slow_worker@qyaar.com  -Q example
    env_file: ./../q_yaar_platform/.env
    depends_on:
      - redisearch
    networks:
      - backend

  celery-beat:
    build: ./../q_yaar_platform
    command: celery -A esamudaay_platform beat -l debug
    env_file: ./../q_yaar_platform/.env
    depends_on:
      - redisearch
      - db
    networks:
      - backend

  db:
    image: postgres
    expose:
      - "5434"
    environment:
      - POSTGRES_DB=q_yaar_db
      - POSTGRES_USER=q_yaar_user
      - POSTGRES_PASSWORD=q_yaar_password
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - backend

  redisearch:
    image: redislabs/redisearch:latest
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
    command:
      [
        "redis-server",
        "--loadmodule",
        "/usr/lib/redis/modules/redisearch.so",
        "--appendonly",
        "yes",
        "--aof-use-rdb-preamble",
        "yes"
      ]

networks:
  backend:


volumes:
  redisdata:
  dbdata:
